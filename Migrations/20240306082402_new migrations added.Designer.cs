// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backEnd.Models;

#nullable disable

namespace backEnd.Migrations
{
    [DbContext(typeof(TravelContext))]
    [Migration("20240306082402_new migrations added")]
    partial class newmigrationsadded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AgentRequest", b =>
                {
                    b.Property<int>("AgentsId")
                        .HasColumnType("int");

                    b.Property<int>("RequestsId")
                        .HasColumnType("int");

                    b.HasKey("AgentsId", "RequestsId");

                    b.HasIndex("RequestsId");

                    b.ToTable("RequestAgents", (string)null);
                });

            modelBuilder.Entity("BudgetUser", b =>
                {
                    b.Property<int>("BudgetsId")
                        .HasColumnType("int");

                    b.Property<int>("TravelersId")
                        .HasColumnType("int");

                    b.HasKey("BudgetsId", "TravelersId");

                    b.HasIndex("TravelersId");

                    b.ToTable("BudgetTravelers", (string)null);
                });

            modelBuilder.Entity("HotelInvoiceHotelQuotation", b =>
                {
                    b.Property<int>("InvoicesId")
                        .HasColumnType("int");

                    b.Property<int>("QuotationsId")
                        .HasColumnType("int");

                    b.HasKey("InvoicesId", "QuotationsId");

                    b.HasIndex("QuotationsId");

                    b.ToTable("HotelInvoiceQuotations", (string)null);
                });

            modelBuilder.Entity("HotelQuotationUser", b =>
                {
                    b.Property<int>("HotelApprovalsId")
                        .HasColumnType("int");

                    b.Property<int>("HotelApprovedId")
                        .HasColumnType("int");

                    b.HasKey("HotelApprovalsId", "HotelApprovedId");

                    b.HasIndex("HotelApprovedId");

                    b.ToTable("HotelApprovals", (string)null);
                });

            modelBuilder.Entity("QuotationTicketInvoice", b =>
                {
                    b.Property<int>("InvoicesId")
                        .HasColumnType("int");

                    b.Property<int>("QuotationsId")
                        .HasColumnType("int");

                    b.HasKey("InvoicesId", "QuotationsId");

                    b.HasIndex("QuotationsId");

                    b.ToTable("TicketInvoiceQuotations", (string)null);
                });

            modelBuilder.Entity("QuotationUser", b =>
                {
                    b.Property<int>("TicketApprovalsId")
                        .HasColumnType("int");

                    b.Property<int>("TicketApprovedId")
                        .HasColumnType("int");

                    b.HasKey("TicketApprovalsId", "TicketApprovedId");

                    b.HasIndex("TicketApprovedId");

                    b.ToTable("TicketApprovals", (string)null);
                });

            modelBuilder.Entity("backEnd.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "phone");

                    b.Property<bool?>("Professional")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "Professional");

                    b.HasKey("Id");

                    b.ToTable("Agents");

                    b.HasAnnotation("Relational:JsonPropertyName", "agents");
                });

            modelBuilder.Entity("backEnd.Models.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountsPrevHandlerIds")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "accountsPrevHandlerIds");

                    b.Property<bool?>("AccountsProcessed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "AccountsProcessed");

                    b.Property<string>("AirTicketBudget")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "airTicketBudget");

                    b.Property<string>("AmountDisbursedTickets")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "amountDisbursedTickets");

                    b.Property<string>("ArrivalDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "arrival_date");

                    b.Property<string>("AuditPrevHandlerIds")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "auditPrevHandlerIds");

                    b.Property<bool?>("AuditProcessed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "AuditProcessed");

                    b.Property<bool?>("BeingProcessed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "beingProcessed");

                    b.Property<bool?>("BeingProcessedAccounts")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "beingProcessedAccounts");

                    b.Property<bool?>("BeingProcessedAudit")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "beingProcessedAudit");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "brand");

                    b.Property<string>("CreationDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "creationDate");

                    b.Property<int?>("CurrentAccountsHandlerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "currentAccountsHandlerId");

                    b.Property<int?>("CurrentAuditHandlerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "currentAuditHandlerId");

                    b.Property<int?>("CurrentHandlerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "currentHandlerId");

                    b.Property<bool?>("Custom")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "custom");

                    b.Property<string>("DepartureDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "departure_date");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "destination");

                    b.Property<string>("HotelBudget")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "hotelBudget");

                    b.Property<string>("IncidentalExpense")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "incidentalExpense");

                    b.Property<string>("Initiated")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "initiated");

                    b.Property<string>("NumberOfDays")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "numberOfDays");

                    b.Property<string>("NumberOfTravelers")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "numberOfTravelers");

                    b.Property<string>("PrevHandlerIds")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "prevHandlerIds");

                    b.Property<bool?>("Processed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "processed");

                    b.Property<bool?>("Rejected")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "rejected");

                    b.Property<bool?>("SeekingAccountsApprovalForTickets")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "seekingAccountsApprovalForTickets");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "subject");

                    b.Property<string>("TicketsAccountHolderNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketsAccountHolderName");

                    b.Property<string>("TicketsAccountNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketsAccountNumber");

                    b.Property<bool?>("TicketsApprovedByAccounts")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketsApprovedByAccounts");

                    b.Property<bool?>("TicketsMoneyDisbursed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketsMoneyDisbursed");

                    b.Property<string>("TotalBookingCost")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "totalBookingCost");

                    b.Property<string>("TotalTripBudget")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "totalTripBudget");

                    b.Property<string>("TransportExpense")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "transportExpense");

                    b.Property<string>("TripId")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("CONCAT('B', RIGHT('00000' + CAST(Id AS NVARCHAR(5)), 5))")
                        .HasAnnotation("Relational:JsonPropertyName", "tripId");

                    b.HasKey("Id");

                    b.ToTable("Budgets");

                    b.HasAnnotation("Relational:JsonPropertyName", "budget");
                });

            modelBuilder.Entity("backEnd.Models.BudgetTicketApprovals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("UserId");

                    b.ToTable("BudgetTicketApprovals");
                });

            modelBuilder.Entity("backEnd.Models.Cost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Item")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "item");

                    b.Property<string>("ItemCost")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "itemCost");

                    b.Property<string>("NumberOfItems")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "numberOfItems");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "requestId");

                    b.Property<int?>("TotalItemCost")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "totalItemCost");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Costs");

                    b.HasAnnotation("Relational:JsonPropertyName", "costs");
                });

            modelBuilder.Entity("backEnd.Models.ExpenseReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmountDisbursed")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "amountDisbursed");

                    b.Property<string>("Approvals")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "approvals");

                    b.Property<string>("BankAccountHolderName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "bankAccountHolderName");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "bankAccountNumber");

                    b.Property<int?>("CurrentHandlerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "currentHandlerId");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "department");

                    b.Property<bool?>("Disbursed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "disbursed");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "employeeId");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "employeeName");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "endDate");

                    b.Property<string>("PrevHandlerIds")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "prevHandlerIds");

                    b.Property<bool?>("Processed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "processed");

                    b.Property<bool?>("Rejected")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "rejected");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "requestId");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "startDate");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<bool?>("Submitted")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "submitted");

                    b.Property<bool?>("SupervisorApproved")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "supervisorApproved");

                    b.Property<bool?>("TravelManagerSubmitted")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "travelManagerSubmitted");

                    b.HasKey("Id");

                    b.HasIndex("CurrentHandlerId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("ExpenseReports");

                    b.HasAnnotation("Relational:JsonPropertyName", "currentExpenseReportsHandled");
                });

            modelBuilder.Entity("backEnd.Models.Expenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "amount");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<int?>("ExpenseReportId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "expenseReportId");

                    b.Property<string>("ExpenseType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "expenseType");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "notes");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.Property<string>("Voucher")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice");

                    b.Property<bool?>("VoucherGiven")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "voucherGiven");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseReportId");

                    b.ToTable("Expenses");

                    b.HasAnnotation("Relational:JsonPropertyName", "expenses");
                });

            modelBuilder.Entity("backEnd.Models.FlyerNos", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Airline")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "airline");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "number");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "userId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FlyerNos");

                    b.HasAnnotation("Relational:JsonPropertyName", "flyerNos");
                });

            modelBuilder.Entity("backEnd.Models.HotelForBrands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "brand");

                    b.Property<string>("BrandOfficeAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "brandOfficeAddress");

                    b.HasKey("Id");

                    b.ToTable("HotelForBrands");

                    b.HasAnnotation("Relational:JsonPropertyName", "hotelForBrands");
                });

            modelBuilder.Entity("backEnd.Models.HotelInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "filePath");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "filename");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.ToTable("HotelInvoices");
                });

            modelBuilder.Entity("backEnd.Models.HotelLocations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HotelForBrandsId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "hotelForBrandsId");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "locationName");

                    b.HasKey("Id");

                    b.HasIndex("HotelForBrandsId");

                    b.ToTable("HotelLocations");

                    b.HasAnnotation("Relational:JsonPropertyName", "hotelLocations");
                });

            modelBuilder.Entity("backEnd.Models.HotelQuotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "approved");

                    b.Property<bool?>("Booked")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "booked");

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "confirmed");

                    b.Property<bool?>("Custom")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "custom");

                    b.Property<bool?>("Hovered")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "hovered");

                    b.Property<Guid?>("Linker")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "linker");

                    b.Property<string>("QuotationText")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "quotationText");

                    b.Property<string>("QuoteGiver")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "quoteGiver");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "requestId");

                    b.Property<string>("RequestIds")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "requestIds");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "selected");

                    b.Property<string>("TotalCosts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "totalCosts");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("RequestId");

                    b.ToTable("HotelQuotations");

                    b.HasAnnotation("Relational:JsonPropertyName", "hotelQuotations");
                });

            modelBuilder.Entity("backEnd.Models.Hotels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HotelAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "hotelAddress");

                    b.Property<int?>("HotelLocationsId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "hotelLocationsId");

                    b.Property<string>("HotelName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "hotelName");

                    b.Property<string>("Rooms")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "rooms");

                    b.HasKey("Id");

                    b.HasIndex("HotelLocationsId");

                    b.ToTable("Hotels");

                    b.HasAnnotation("Relational:JsonPropertyName", "hotels");
                });

            modelBuilder.Entity("backEnd.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Date");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "Event");

                    b.Property<int?>("FromId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "FromId");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "RequestId");

                    b.Property<int?>("ToId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "ToId");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Logs");

                    b.HasAnnotation("Relational:JsonPropertyName", "logs");
                });

            modelBuilder.Entity("backEnd.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "content");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "requestId");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("Messages");

                    b.HasAnnotation("Relational:JsonPropertyName", "messages");
                });

            modelBuilder.Entity("backEnd.Models.MoneyReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdvanceMoneyInHand")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "advanceMoneyInHand");

                    b.Property<string>("AmountDisbursed")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "amountDisbursed");

                    b.Property<string>("Approvals")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "approvals");

                    b.Property<string>("AsAdvanceAgainst")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "asAdvanceAgainst");

                    b.Property<string>("BankAccountHolderName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "bankAccountHolderName");

                    b.Property<string>("BankAccountNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "bankAccountNumber");

                    b.Property<int?>("CurrentHandlerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "currentHandlerId");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "designation");

                    b.Property<bool?>("Disbursed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "disbursed");

                    b.Property<string>("I")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "i");

                    b.Property<string>("PrevHandlerIds")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "prevHandlerIds");

                    b.Property<bool?>("Processed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "processed");

                    b.Property<bool?>("Rejected")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "rejected");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "requestId");

                    b.Property<string>("RequiredTK")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "requiredTK");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "section");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "serialNo");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<bool?>("Submitted")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "submitted");

                    b.Property<bool?>("SupervisorApproved")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "supervisorApproved");

                    b.Property<string>("Taka")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "taka");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "unit");

                    b.HasKey("Id");

                    b.HasIndex("CurrentHandlerId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.ToTable("MoneyReceipts");

                    b.HasAnnotation("Relational:JsonPropertyName", "currentReceiptsHandled");
                });

            modelBuilder.Entity("backEnd.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Event")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "event");

                    b.Property<int?>("From")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "from");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "message");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "sourceId");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "time");

                    b.Property<int?>("To")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "to");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("backEnd.Models.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "approved");

                    b.Property<bool?>("Booked")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "booked");

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "confirmed");

                    b.Property<bool?>("Custom")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "custom");

                    b.Property<bool?>("Hovered")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "hovered");

                    b.Property<Guid?>("Linker")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "linker");

                    b.Property<string>("QuotationText")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "quotationText");

                    b.Property<string>("QuoteGiver")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "quoteGiver");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "requestId");

                    b.Property<string>("RequestIds")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "requestIds");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "selected");

                    b.Property<string>("TotalCosts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "totalCosts");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("RequestId");

                    b.ToTable("Quotations");

                    b.HasAnnotation("Relational:JsonPropertyName", "quotations");
                });

            modelBuilder.Entity("backEnd.Models.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccomodationRequired")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "accomodationRequired");

                    b.Property<string>("Activities")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "activities");

                    b.Property<int?>("AgentNumbers")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "agentNumbers");

                    b.Property<string>("Approvals")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "approvals");

                    b.Property<bool?>("BeingProcessed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "beingProcessed");

                    b.Property<string>("Best")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "best");

                    b.Property<string>("BestHotel")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "bestHotel");

                    b.Property<bool?>("Booked")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "booked");

                    b.Property<int?>("BudgetId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "budgetId");

                    b.Property<bool?>("Confirmed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "confirmed");

                    b.Property<int?>("CurrentHandlerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "currentHandlerId");

                    b.Property<bool?>("Custom")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "custom");

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "date");

                    b.Property<bool?>("DepartmentHeadApproved")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "departmentHeadApproved");

                    b.Property<string>("Destination")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "destination");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "endDate");

                    b.Property<bool?>("ExpenseReportGiven")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "expenseReportGiven");

                    b.Property<bool?>("HotelBooked")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "hotelBooked");

                    b.Property<bool?>("HotelConfirmed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "hotelConfirmed");

                    b.Property<bool?>("HotelInvoiceUploaded")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "hotelInvoiceUploaded");

                    b.Property<bool?>("InTrip")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "inTrip");

                    b.Property<string>("Items")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "items");

                    b.Property<string>("Meetings")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "meetings");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mode");

                    b.Property<int>("MoneyReceiptId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "moneyReceiptId");

                    b.Property<bool>("MoneyReceiptSubmitted")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "moneyReceiptSubmitted");

                    b.Property<string>("Number")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("REPLICATE('0', 7 - LEN(Id)) + CAST(Id AS VARCHAR(7))")
                        .HasAnnotation("Relational:JsonPropertyName", "number");

                    b.Property<string>("NumberOfNights")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "numberOfNights");

                    b.Property<string>("Objectives")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "objectives");

                    b.Property<bool?>("PermanentlyRejected")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "permanentlyRejected");

                    b.Property<string>("Personnel")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "personnel");

                    b.Property<string>("PrevHandlerIds")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "prevHandlerIds");

                    b.Property<bool?>("Processed")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "processed");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "purpose");

                    b.Property<string>("RequestBudget")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "requestBudget");

                    b.Property<int?>("RequesterId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "requesterId");

                    b.Property<bool?>("SeekingHotelInvoices")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "seekingHotelInvoices");

                    b.Property<bool?>("SeekingInvoices")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "seekingInvoices");

                    b.Property<bool?>("Selected")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "selected");

                    b.Property<string>("StartDate")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "startDate");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<bool?>("SupervisorApproved")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "supervisorApproved");

                    b.Property<bool?>("TicketInvoiceUploaded")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "ticketInvoiceUploaded");

                    b.Property<int?>("TotalCost")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "totalCost");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("CurrentHandlerId");

                    b.HasIndex("RequesterId");

                    b.ToTable("Requests");

                    b.HasAnnotation("Relational:JsonPropertyName", "currentHandled");
                });

            modelBuilder.Entity("backEnd.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("backEnd.Models.TicketInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "filePath");

                    b.Property<string>("Filename")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "filename");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    b.ToTable("TicketInvoices");
                });

            modelBuilder.Entity("backEnd.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Available")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "available");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "department");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "designation");

                    b.Property<string>("EmpCode")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "empCode");

                    b.Property<string>("EmpId")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(max)")
                        .HasComputedColumnSql("REPLICATE('0', 7 - LEN(Id)) + CAST(Id AS VARCHAR(7))")
                        .HasAnnotation("Relational:JsonPropertyName", "empId");

                    b.Property<string>("EmpName")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "empName");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "extension");

                    b.Property<string>("HasFrequentFlyerNo")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "hasFrequentFlyerNo");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "location");

                    b.Property<string>("MailAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mailAddress");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "mobileNo");

                    b.Property<int?>("Numbers")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "numbers");

                    b.Property<string>("PassportNo")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "passportNo");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "password");

                    b.Property<string>("Preferences")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "preferences");

                    b.Property<int?>("Raters")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "raters");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "section");

                    b.Property<int?>("SuperVisorId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "superVisorId");

                    b.Property<string>("Team")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "team");

                    b.Property<int?>("TravelHandlerId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "travelHandlerId");

                    b.Property<string>("Unit")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "unit");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "userType");

                    b.Property<string>("Wing")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "wing");

                    b.Property<int?>("ZonalHeadId")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "zonalHeadId");

                    b.HasKey("Id");

                    b.HasIndex("SuperVisorId");

                    b.HasIndex("TravelHandlerId");

                    b.HasIndex("ZonalHeadId");

                    b.ToTable("Users");

                    b.HasAnnotation("Relational:JsonPropertyName", "currentHandler");
                });

            modelBuilder.Entity("backEnd.Models.UserRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("AgentRequest", b =>
                {
                    b.HasOne("backEnd.Models.Agent", null)
                        .WithMany()
                        .HasForeignKey("AgentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backEnd.Models.Request", null)
                        .WithMany()
                        .HasForeignKey("RequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BudgetUser", b =>
                {
                    b.HasOne("backEnd.Models.Budget", null)
                        .WithMany()
                        .HasForeignKey("BudgetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backEnd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("TravelersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelInvoiceHotelQuotation", b =>
                {
                    b.HasOne("backEnd.Models.HotelInvoice", null)
                        .WithMany()
                        .HasForeignKey("InvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backEnd.Models.HotelQuotation", null)
                        .WithMany()
                        .HasForeignKey("QuotationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelQuotationUser", b =>
                {
                    b.HasOne("backEnd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("HotelApprovalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backEnd.Models.HotelQuotation", null)
                        .WithMany()
                        .HasForeignKey("HotelApprovedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuotationTicketInvoice", b =>
                {
                    b.HasOne("backEnd.Models.TicketInvoice", null)
                        .WithMany()
                        .HasForeignKey("InvoicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backEnd.Models.Quotation", null)
                        .WithMany()
                        .HasForeignKey("QuotationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuotationUser", b =>
                {
                    b.HasOne("backEnd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("TicketApprovalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backEnd.Models.Quotation", null)
                        .WithMany()
                        .HasForeignKey("TicketApprovedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backEnd.Models.BudgetTicketApprovals", b =>
                {
                    b.HasOne("backEnd.Models.Budget", "Budget")
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backEnd.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Budget");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backEnd.Models.Cost", b =>
                {
                    b.HasOne("backEnd.Models.Request", "Request")
                        .WithMany("Costs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("backEnd.Models.ExpenseReport", b =>
                {
                    b.HasOne("backEnd.Models.User", "CurrentHandler")
                        .WithMany("CurrentExpenseReportsHandled")
                        .HasForeignKey("CurrentHandlerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("backEnd.Models.Request", "Request")
                        .WithOne("ExpenseReport")
                        .HasForeignKey("backEnd.Models.ExpenseReport", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CurrentHandler");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("backEnd.Models.Expenses", b =>
                {
                    b.HasOne("backEnd.Models.ExpenseReport", "ExpenseReport")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseReportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ExpenseReport");
                });

            modelBuilder.Entity("backEnd.Models.FlyerNos", b =>
                {
                    b.HasOne("backEnd.Models.User", "User")
                        .WithMany("FlyerNos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("backEnd.Models.HotelLocations", b =>
                {
                    b.HasOne("backEnd.Models.HotelForBrands", "HotelForBrands")
                        .WithMany("Locations")
                        .HasForeignKey("HotelForBrandsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("HotelForBrands");
                });

            modelBuilder.Entity("backEnd.Models.HotelQuotation", b =>
                {
                    b.HasOne("backEnd.Models.Agent", null)
                        .WithMany("HotelQuotations")
                        .HasForeignKey("AgentId");

                    b.HasOne("backEnd.Models.Request", "Request")
                        .WithMany("HotelQuotations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("backEnd.Models.Hotels", b =>
                {
                    b.HasOne("backEnd.Models.HotelLocations", "HotelLocation")
                        .WithMany("Hotels")
                        .HasForeignKey("HotelLocationsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("HotelLocation");
                });

            modelBuilder.Entity("backEnd.Models.Log", b =>
                {
                    b.HasOne("backEnd.Models.Request", "Request")
                        .WithMany("Logs")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("backEnd.Models.Message", b =>
                {
                    b.HasOne("backEnd.Models.Request", "Request")
                        .WithMany("Messages")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("backEnd.Models.MoneyReceipt", b =>
                {
                    b.HasOne("backEnd.Models.User", "CurrentHandler")
                        .WithMany("CurrentReceiptsHandled")
                        .HasForeignKey("CurrentHandlerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("backEnd.Models.Request", "Request")
                        .WithOne("MoneyReceipt")
                        .HasForeignKey("backEnd.Models.MoneyReceipt", "RequestId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CurrentHandler");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("backEnd.Models.Quotation", b =>
                {
                    b.HasOne("backEnd.Models.Agent", null)
                        .WithMany("Quotations")
                        .HasForeignKey("AgentId");

                    b.HasOne("backEnd.Models.Request", "Request")
                        .WithMany("Quotations")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Request");
                });

            modelBuilder.Entity("backEnd.Models.Request", b =>
                {
                    b.HasOne("backEnd.Models.Budget", "Budget")
                        .WithMany("Requests")
                        .HasForeignKey("BudgetId");

                    b.HasOne("backEnd.Models.User", "CurrentHandler")
                        .WithMany("CurrentHandled")
                        .HasForeignKey("CurrentHandlerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("backEnd.Models.User", "Requester")
                        .WithMany("Requests")
                        .HasForeignKey("RequesterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Budget");

                    b.Navigation("CurrentHandler");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("backEnd.Models.User", b =>
                {
                    b.HasOne("backEnd.Models.User", "SuperVisor")
                        .WithMany("SuperVised")
                        .HasForeignKey("SuperVisorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("backEnd.Models.User", "TravelHandler")
                        .WithMany("TravelHandled")
                        .HasForeignKey("TravelHandlerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("backEnd.Models.User", "ZonalHead")
                        .WithMany("Head")
                        .HasForeignKey("ZonalHeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SuperVisor");

                    b.Navigation("TravelHandler");

                    b.Navigation("ZonalHead");
                });

            modelBuilder.Entity("backEnd.Models.UserRoles", b =>
                {
                    b.HasOne("backEnd.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backEnd.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("backEnd.Models.Agent", b =>
                {
                    b.Navigation("HotelQuotations");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("backEnd.Models.Budget", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("backEnd.Models.ExpenseReport", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("backEnd.Models.HotelForBrands", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("backEnd.Models.HotelLocations", b =>
                {
                    b.Navigation("Hotels");
                });

            modelBuilder.Entity("backEnd.Models.Request", b =>
                {
                    b.Navigation("Costs");

                    b.Navigation("ExpenseReport");

                    b.Navigation("HotelQuotations");

                    b.Navigation("Logs");

                    b.Navigation("Messages");

                    b.Navigation("MoneyReceipt")
                        .IsRequired();

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("backEnd.Models.User", b =>
                {
                    b.Navigation("CurrentExpenseReportsHandled");

                    b.Navigation("CurrentHandled");

                    b.Navigation("CurrentReceiptsHandled");

                    b.Navigation("FlyerNos");

                    b.Navigation("Head");

                    b.Navigation("Requests");

                    b.Navigation("SuperVised");

                    b.Navigation("TravelHandled");
                });
#pragma warning restore 612, 618
        }
    }
}
